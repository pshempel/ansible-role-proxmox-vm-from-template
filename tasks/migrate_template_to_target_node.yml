
- name: Debug vm_to_clone.node and vm_target_node
  ansible.builtin.debug:
    msg: "Requested (vm_to_clone.node) node for vm is: {{ vm_to_clone.node | default('not provided in playbook') }}. Target node is: {{ vm_target_node }}."

- name: Determine the template migration target node
  ansible.builtin.set_fact:
    migration_target_node: "{{ vm_to_clone.node | default(vm_target_node) }}"
  when: vm_to_clone.node is defined or vm_target_node is defined

- name: Debug the determined template migration target node
  ansible.builtin.debug:
    msg: "Determined template migration target node: {{ migration_target_node  | default('Migration Target Node not determined yet') }}"

- name: Ensure template_current_node is defined
  ansible.builtin.fail:
    msg: "'template_current_node' is not defined or is empty. Ensure it's correctly set before proceeding."
  when: template_current_node is not defined or template_current_node | trim == ""

- name: Migrate the template to the requested node
  ansible.builtin.uri:
    url: "{{ proxmox_api_url }}/nodes/{{ template_current_node }}/qemu/{{ selected_template_vmid }}/migrate"
    method: POST
    headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    body_format: json
    body: >
      {
        "target": "{{ migration_target_node }}"
      }
    status_code: [200, 202]
    validate_certs: "{{ pvmt_default_validate_certs | default('no') }}"
  register: migration_response
  when:
    - template_current_node != migration_target_node
    - migration_target_node is defined

- name: Wait for the template migration task to complete
  ansible.builtin.uri:
    url: "{{ proxmox_api_url }}/nodes/{{ template_current_node }}/tasks/{{ migration_response.json.data }}/status"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    return_content: yes
    validate_certs: "{{ pvmt_default_validate_certs | default('no') }}"
  register: migration_status
  until: migration_status.json.data.status == "stopped"
  retries: 60
  delay: 10
  when:
    - migration_response is defined
    - "'json' in migration_response"
    - "'data' in migration_response.json"

- name: Set migration completion flag
  ansible.builtin.set_fact:
    migration_completed: true
  when: migration_response is defined and (migration_response.status in [200, 202])
