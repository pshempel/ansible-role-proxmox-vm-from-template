- name: Fetch VMs and templates from Proxmox for duplicate checks
  uri:
    url: "{{ proxmox_api_url }}/cluster/resources?type=vm"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    return_content: yes
    validate_certs: {{ vm_to_clone.default_validate_certs | default(no) }}
  register: all_vms
  delegate_to: localhost
  
  #  Verify we are not attempting to create or update an existing VM Name
- name: Check if provided VM name exists
  set_fact:
    vmname_exists: "{{ vmname_exists | default({}) | combine({ item.name: (item.name + '.' + default_domain_name) in all_vms.json.data | map(attribute='name') | list }) }}"
  loop: "{{ vms }}"
  loop_control:
    loop_var: item

# Begin Debugging of VM ID raw vmid list
#- name: Debug all VMIDs from Proxmox
#  debug:
#    msg: "{{ all_vms.json.data | map(attribute='vmid') | map('string') | list }}"

# # Begin Debugging of VM ID assigned vmid
#- name: Debug specific VMID check list
#  debug:
#    msg: "Checking if VMID '{{ vmid_dbg_check.vmid }}' exists: {{ (vmid_dbg_check.vmid is defined and vmid_dbg_check.vmid|string in all_vms.json.data | map(attribute='vmid') | map('string') | list) }}"
#  loop: "{{ vms }}"
#  loop_control:
#    loop_var: vmid_dbg_check

# Set vmid_exists True if it does exits
- name: Check if provided VMID exists
  set_fact:
    vmid_exists: "{{ vmid_exists | default({}) | combine({ item.vmid: (item.vmid is defined and item.vmid|string in all_vms.json.data | map(attribute='vmid') | map('string') | list) }) }}"
  loop: "{{ vms }}"
  loop_control:
    loop_var: item
  when: item.vmid is defined

- name: Debug vmname_exists check results
  debug:
    var: vmname_exists

- name: Debug vmid_exists check results
  debug:
    var: vmid_exists
