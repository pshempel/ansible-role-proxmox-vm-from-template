---
# tasks/check_for_duplicate_vmid_vmname.yml
- name: Fetch VMs and templates from Proxmox for duplicate checks
  ansible.builtin.uri:
    url: "{{ proxmox_api_url }}/cluster/resources?type=vm"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    return_content: yes
    validate_certs: "{{ pvmt_default_validate_certs | default('no') }}"
  register: all_vms
  delegate_to: localhost

#  Verify we are not attempting to create or update an existing VM Name
- name: Check if provided VM name exists
  ansible.builtin.set_fact:
   vmname_exists: "{{ vmname_exists | default({}) | combine({ item.name: (item.name + '.' + (item.domain_name | default(pvmt_default_domain_name))) in all_vms.json.data | map(attribute='name') | list }) }}"
  loop: "{{ vms }}"
  loop_control:
    loop_var: item

# Set vmid_exists True if it does exits
- name: Check if provided VMID exists
  ansible.builtin.set_fact:
   vmid_exists: "{{ vmid_exists | default({}) | combine({ item.vmid: (item.vmid is defined and item.vmid|string in all_vms.json.data | map(attribute='vmid') | map('string') | list) }) }}"
  loop: "{{ vms }}"
  loop_control:
    loop_var: item
  when: item.vmid is defined

- name: Debug vmname_exists check results
  ansible.builtin.debug:
    var: vmname_exists
  when:
    - pvmt_debug_mode_enable

- name: Debug vmid_exists check results
  ansible.builtin.debug:
    var: vmid_exists
  when:
    - pvmt_debug_mode_enable
