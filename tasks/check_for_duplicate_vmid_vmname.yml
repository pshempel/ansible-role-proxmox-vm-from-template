- name: Fetch VMs and templates from Proxmox for duplicate checks
  uri:
    url: "{{ proxmox_api_url }}/cluster/resources?type=vm"
    method: GET
    headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    return_content: yes
    validate_certs: no
  register: all_vms
  delegate_to: localhost

- name: Check if provided VMID and VM name exists
  set_fact:
    vms: >-
      {{
        vms | map('combine', {
          'vmid_exists': (vm_data_to_clone.vmid is defined) and (vm_data_to_clone.vmid in (all_vms.json.data 
          | map(attribute='vmid') | map('string') | list)),
          'vm_name_exists': (vm_data_to_clone.name in (all_vms.json.data 
          | map(attribute='name') | list))
        }) | list
      }}
- name: Debug vm_data_to_clone.vmid variable in Check and provide VMID and VM name exists
  debug:
    msg: >
      The vmname is: {{ vm_data_to_clone.name }}. \n
      The vmid is: {{ vm_data_to_clone.vmid | default('VMID was not passed') }}
# Debug the vm_to_clone variable to ensure it's being passed correctly
  loop: "{{ vms }}"
  loop_control:
    loop_var: check_if_vmid_or_vname_exists
  